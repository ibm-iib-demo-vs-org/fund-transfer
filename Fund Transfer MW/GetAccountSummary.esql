




CREATE COMPUTE MODULE GetAccountsSummary
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN


		CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		DECLARE sqlCondition CHARACTER;
		DECLARE inBody REFERENCE TO InputRoot.XMLNSC.ns:AccountsSummaryRequest.ns:eAI_BODY;
		IF EXISTS(inBody.ns:accountNumber[]) AND EXISTS(inBody.ns:customerNumber[]) THEN
			SET sqlCondition = '(FT_ACCOUNT.ACCOUNT_NUMBER = ' || inBody.ns:accountNumber || 'OR FT_CUSTOMER.CUSTOMER_NO = ' || inBody.ns:customerNumber || ')';
		ELSEIF EXISTS(inBody.ns:accountNumber[]) THEN
			SET sqlCondition = 'FT_ACCOUNT.ACCOUNT_NUMBER = ' || inBody.ns:accountNumber;
		ELSEIF EXISTS(inBody.ns:customerNumber[]) THEN
			SET sqlCondition = 'FT_CUSTOMER.CUSTOMER_NO = ' || inBody.ns:customerNumber;
		END IF;

		CALL RetrieveAccountsSummary(sqlCondition);


		RETURN TRUE;
	END;
	CREATE PROCEDURE RetrieveAccountsSummary(IN sqlCondition CHARACTER) BEGIN
		DECLARE SQL CHARACTER;
		SET SQL = 'SELECT FT_ACCOUNT.ACCOUNT_NUMBER AS "accountNumber",
		FT_CURRENCY.CCY_CODE AS "accountCurrency",
		FT_ACCOUNT_TYPE.CODE AS "accountType",
		FT_ACCOUNT_STATUS.STATUS AS "accountStatus",
		FT_ACCOUNT.ACCOUNT_IBAN AS "IBAN",
		FT_ACCOUNT.CURRENT_BALANCE AS "currentBalance",
		FT_ACCOUNT.AVAILABLE_BALANCE AS "availableBalance",
		FT_ACCOUNT.EQUIVALENT_BALANCE AS "equivalentBalance",
		FT_ACCOUNT.ACCOUNT_NAME AS "accountShortNameEn",
		FT_ACCOUNT.TOTAL_HOLD_AMOUNT AS "totalHoldAmount"
		FROM FT_ACCOUNT ,
		FT_CURRENCY,
		FT_ACCOUNT_TYPE,
		FT_ACCOUNT_STATUS,
		FT_CUSTOMER
		WHERE FT_ACCOUNT.ACC_CURR_ID = FT_CURRENCY.ID
		AND FT_ACCOUNT_TYPE.ID = FT_ACCOUNT.ACCOUNT_TYPE_ID
		AND FT_ACCOUNT_STATUS.ID = FT_ACCOUNT.ACCOUNT_STATUS_ID
		AND FT_ACCOUNT.CUSTOMER_NO = FT_CUSTOMER.CUSTOMER_NO
		AND ' || sqlCondition;


		SET OutputRoot.XMLNSC.ns:AccountsSummaryReply.ns:eAI_BODY.ns:accountSummary[] = PASSTHRU(SQL);

		DECLARE length INTEGER CARDINALITY(OutputRoot.XMLNSC.ns:AccountsSummaryReply.ns:eAI_BODY.ns:accountSummary[]);
		DECLARE i INTEGER;
		DECLARE flag CHARACTER;
		SET i = 1;
		WHILE i <= length DO
			SET OutputRoot.XMLNSC.ns:AccountsSummaryReply.ns:eAI_BODY.ns:accountSummary[i].ns:availableBalance.ns:amount = OutputRoot.XMLNSC.ns:AccountsSummaryReply.ns:eAI_BODY.ns:accountSummary[i].availableBalance;
			SET OutputRoot.XMLNSC.ns:AccountsSummaryReply.ns:eAI_BODY.ns:accountSummary[i].ns:currentBalance.ns:amount = OutputRoot.XMLNSC.ns:AccountsSummaryReply.ns:eAI_BODY.ns:accountSummary[i].currentBalance;
			SET OutputRoot.XMLNSC.ns:AccountsSummaryReply.ns:eAI_BODY.ns:accountSummary[i].ns:equivalentBalance.ns:amount = OutputRoot.XMLNSC.ns:AccountsSummaryReply.ns:eAI_BODY.ns:accountSummary[i].equivalentBalance;
			SET OutputRoot.XMLNSC.ns:AccountsSummaryReply.ns:eAI_BODY.ns:accountSummary[i].availableBalance = NULL;
			SET OutputRoot.XMLNSC.ns:AccountsSummaryReply.ns:eAI_BODY.ns:accountSummary[i].currentBalance = NULL;
			SET OutputRoot.XMLNSC.ns:AccountsSummaryReply.ns:eAI_BODY.ns:accountSummary[i].equivalentBalance = NULL;

			IF MOD(i,2) = 0 THEN
				SET flag = 'DR';
			ELSE
				SET flag = 'CR';
			END IF;
			SET OutputRoot.XMLNSC.ns:AccountsSummaryReply.ns:eAI_BODY.ns:accountSummary[i].ns:availableBalance.ns:creditDebitFlag = flag;
			SET OutputRoot.XMLNSC.ns:AccountsSummaryReply.ns:eAI_BODY.ns:accountSummary[i].ns:currentBalance.ns:creditDebitFlag = flag;
			SET OutputRoot.XMLNSC.ns:AccountsSummaryReply.ns:eAI_BODY.ns:accountSummary[i].ns:equivalentBalance.ns:creditDebitFlag = flag;

			SET i = i + 1;
		END WHILE;
	END;
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;

END MODULE;