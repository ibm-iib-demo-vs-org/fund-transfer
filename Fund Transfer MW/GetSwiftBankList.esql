





CREATE COMPUTE MODULE GetSwiftBankList
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		CALL retrieveSwiftBankList();
		IF CARDINALITY(OutputRoot.XMLNSC.ns:SwiftBankListReply.ns:eAI_BODY.ns:swiftBankDetail[]) = 0 THEN
			SET OutputRoot.XMLNSC.ns:SwiftBankListReply.ns:eAI_BODY = NULL;

		END IF;

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;

	CREATE PROCEDURE retrieveSwiftBankList() BEGIN
		DECLARE SQL CHARACTER;
		SET SQL = 'SELECT FT_BANK.SWIFT_CODE AS "bankBIC",
		FT_BANK.BANK_NAME AS "bankName",
		FT_BANK.BRANCH_DETAILS AS "bankBranch",
		FT_BANK.ADDRESS1 AS "bankAddress1",
		FT_BANK.ADDRESS2 AS "bankAddress2",
		FT_BANK.ADDRESS3 AS "bankAddress3",
		FT_BANK.CITY AS "bankCity",
		FT_LKP_COUNTRY.DESCRIPTION AS "bankCountry",
		FT_LKP_COUNTRY.CODE AS "bankCountryCode"
		FROM FUND_TRANSFER_MW.FT_BANK ,
		FUND_TRANSFER_MW.FT_LKP_COUNTRY  
		WHERE FT_BANK.COUNTRY_ID = FT_LKP_COUNTRY.ID
		AND FT_BANK.SWIFT_CODE = ''' || InputRoot.XMLNSC.ns:SwiftBankListRequest.ns:eAI_BODY.ns:BIC || '''';
		SET OutputRoot.XMLNSC.ns:SwiftBankListReply.ns:eAI_BODY.ns:swiftBankDetail[] = PASSTHRU(SQL);

	END;
END MODULE;